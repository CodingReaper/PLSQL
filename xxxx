import React, { useState, useMemo, useRef } from "react";
import { BarChart3, Filter, Search } from "lucide-react";
import { AgGridReact } from "ag-grid-react"; // âœ… Ag-Grid
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";
import { Box, Button } from "@mui/material";
import FileDownloadIcon from "@mui/icons-material/FileDownload";
import stateStreetLogo from "../assets/logo.png";

// ---------------- TYPES ----------------
interface Person {
  id: number;
  firstName: string;
  lastName: string;
  company: string;
  city: string;
  country: string;
}

interface Trade {
  id: string;
  symbol: string;
  quantity: string;
  price: string;
  status: string;
}

type TableKey = "people" | "trades";

// ---------------- SAMPLE DATA ----------------
const peopleData: Person[] = [
  {
    id: 1,
    firstName: "John",
    lastName: "Doe",
    company: "Acme Inc.",
    city: "East Daphne",
    country: "USA",
  },
  {
    id: 2,
    firstName: "Jane",
    lastName: "Doe",
    company: "Beta Corp",
    city: "Columbus",
    country: "USA",
  },
  {
    id: 3,
    firstName: "Joe",
    lastName: "Doe",
    company: "Gamma LLC",
    city: "South Linda",
    country: "USA",
  },
];

const tradesData: Trade[] = [
  {
    id: "TRD-001",
    symbol: "AAPL",
    quantity: "1000",
    price: "150.25",
    status: "Settled",
  },
  {
    id: "TRD-002",
    symbol: "MSFT",
    quantity: "500",
    price: "320.80",
    status: "Failed",
  },
  {
    id: "TRD-003",
    symbol: "GOOGL",
    quantity: "200",
    price: "2750.30",
    status: "Pending",
  },
];

// ---------------- CONFIG ----------------
const tableConfigs: Record<
  TableKey,
  {
    name: string;
    data: Person[] | Trade[];
    columns: any[];
  }
> = {
  people: {
    name: "People",
    data: peopleData,
    columns: [
      { field: "id", headerName: "ID" },
      { field: "firstName", headerName: "First Name" },
      { field: "lastName", headerName: "Last Name" },
      { field: "company", headerName: "Company" },
      { field: "city", headerName: "City" },
      { field: "country", headerName: "Country" },
    ],
  },
  trades: {
    name: "Trades",
    data: tradesData,
    columns: [
      { field: "id", headerName: "Trade ID" },
      { field: "symbol", headerName: "Symbol" },
      { field: "quantity", headerName: "Quantity" },
      { field: "price", headerName: "Price" },
      { field: "status", headerName: "Status" },
    ],
  },
};

// ---------------- MAIN COMPONENT ----------------
const DataGridDashboard: React.FC = () => {
  const [selectedTable, setSelectedTable] = useState<TableKey | "">("");
  const [appliedTable, setAppliedTable] = useState<TableKey | "">("");
  const gridRef = useRef<AgGridReact>(null);

  const config = appliedTable ? tableConfigs[appliedTable] : null;
  const columns = useMemo(() => (config ? config.columns : []), [config]);
  const data = useMemo(() => (config ? config.data : []), [config]);

  // CSV/Excel Export
  const handleExportCSV = () => {
    gridRef.current?.api.exportDataAsCsv();
  };

  const handleExportExcel = () => {
    gridRef.current?.api.exportDataAsExcel();
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* ---------------- HEADER ---------------- */}
      <div className="bg-white shadow-sm">
        <div className="bg-gradient-to-r from-indigo-700 to-blue-600 px-6 py-1.5">
          <div className="h-14 flex items-center">
            <div className="text-white font-bold text-xl">
              <img
                src={stateStreetLogo}
                alt="State Street Logo"
                className="h-14 w-auto object-contain"
              />
            </div>
          </div>
        </div>
      </div>

      {/* ---------------- MAIN CONTENT ---------------- */}
      <div className="flex-1 flex gap-6 px-3 pt-3 pb-6 overflow-hidden">
        {/* Data Grid Section (70%) */}
        <div className="flex-[0.8] bg-white rounded-xl shadow-lg border border-gray-200 flex flex-col overflow-hidden">
          <div className="p-4 border-b border-gray-200 flex justify-between items-center">
            <h2 className="text-lg font-semibold text-gray-800 flex items-center">
              <BarChart3 className="w-5 h-5 mr-2 text-blue-600" />
              Data Grid
              {appliedTable && (
                <span className="ml-2 text-sm bg-blue-100 text-blue-600 px-2 py-1 rounded">
                  {config?.name}
                </span>
              )}
            </h2>

            {appliedTable && (
              <Box sx={{ display: "flex", gap: "10px" }}>
                <Button
                  onClick={handleExportCSV}
                  startIcon={<FileDownloadIcon />}
                >
                  Export CSV
                </Button>
                <Button
                  onClick={handleExportExcel}
                  startIcon={<FileDownloadIcon />}
                >
                  Export Excel
                </Button>
              </Box>
            )}
          </div>

          <div className="flex-1 p-0 overflow-hidden">
            {appliedTable && data.length > 0 ? (
              <div className="h-full w-full ag-theme-alpine">
                <AgGridReact
                  ref={gridRef}
                  rowData={data}
                  columnDefs={columns}
                  rowSelection="multiple"
                  pagination={true}
                  paginationPageSize={5}
                  animateRows={true}
                  defaultColDef={{
                    flex: 1,
                    resizable: true,
                    sortable: true,
                    filter: true,
                  }}
                />
              </div>
            ) : (
              <div className="flex items-center justify-center h-full text-gray-500">
                <div className="text-center">
                  <Search className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p className="text-lg font-medium mb-2">No Data Selected</p>
                  <p className="text-sm">
                    Please select a table and click Submit to view data.
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Filter Section (30%) */}
        <div className="flex-[0.2] bg-white rounded-xl shadow-lg border border-gray-200 flex flex-col overflow-hidden">
          <div className="p-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-800 flex items-center">
              <Filter className="w-5 h-5 mr-2 text-blue-600" />
              Filters
            </h2>
          </div>
          <div className="flex-1 p-4 space-y-6">
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Select Table
              </label>
              <select
                value={selectedTable}
                onChange={(e) => setSelectedTable(e.target.value as TableKey)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
              >
                <option value="">Choose a table...</option>
                {Object.entries(tableConfigs).map(([key, cfg]) => (
                  <option key={key} value={key}>
                    {cfg.name}
                  </option>
                ))}
              </select>
            </div>

            <Button
              fullWidth
              disabled={!selectedTable}
              onClick={() => setAppliedTable(selectedTable)}
              sx={{
                background: "#2563eb",
                color: "white",
                fontWeight: "400",
                textTransform: "none",
                "&:hover": {
                  background: "linear-gradient(to right, #3730a3, #1e40af)",
                },
              }}
            >
              Submit
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DataGridDashboard;